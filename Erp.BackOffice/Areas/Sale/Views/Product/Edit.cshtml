@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Helpers
@using Erp.BackOffice.Sale.Models
@using Erp.Domain.Sale.Entities

@model ProductViewModel

@{
    ViewBag.Title = Wording.PageEdit_Product;

    Layout = "~/Views/Shared/" + (Request["IsPopup"] == null ? "ACE_AdminLayout.cshtml" : "_PopupLayout.cshtml");
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Product",
        ActionName = "Edit",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = true
    };
    List<Supplier> supplier_List=(List<Supplier>)ViewBag.supplierList;
    IEnumerable<SelectListItem> ManufacturerList = Erp.BackOffice.Helpers.Common.GetSelectList_Category("manufacturerList", null, "value");
    IEnumerable<SelectListItem> CategoryList = Erp.BackOffice.Helpers.Common.GetSelectList_Category("product", null, "value");
    IEnumerable<SelectListItem> productUnitList = Erp.BackOffice.Helpers.Common.GetSelectList_Category("productUnit", null, "value");
    IEnumerable<SelectListItem> productGroupList = Erp.BackOffice.Helpers.Common.GetSelectList_Category("Categories_product", null, "value");
}

@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
}

<div class="text-danger">@ViewBag.errors</div>
@using (Html.BeginPageHeaderContainer(pageSetting))
{

}
@using (Html.BeginForm_AceStyle((string)ViewBag.Title, "Edit", "Product", null, FormMethod.Post, new { id = "EditProduct", @class = "form-horizontal clearfix", enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)
    <input type="hidden" name="IsPopup" value="@Request["IsPopup"]" />
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.CreatedUserId)
    @Html.HiddenFor(model => model.CreatedDate)
    @Html.HiddenFor(model => model.IsDeleted)
    @Html.HiddenFor(model => model.Image_Name)
    @Html.HiddenFor(model => model.Type)

    <div class="row">
        <div class="col-sm-6">
            @Html.CustomTextboxFor(model => model.Name, null, null, WidthType.span12)
            @Html.CustomTextboxFor(model => model.Code, null, null, WidthType.span12)
            @Html.CustomDropDownListFor(model => model.Manufacturer, ManufacturerList, WidthType.span12, true, null, DropdownListStyle.DropdownListStyleDefault)
            @Html.CustomDropDownListFor(model => model.CategoryCode, CategoryList, WidthType.span12, true, null, DropdownListStyle.DropdownListStyleDefault)
            @Html.CustomDropDownListFor(model => model.ProductGroup, productGroupList, WidthType.span12, true, null, DropdownListStyle.DropdownListStyleDefault)
            @Html.CustomDropDownListFor(model => model.Unit, productUnitList, WidthType.span12, true, null, DropdownListStyle.DropdownListStyleDefault)
            @Html.CustomTextboxFor(model => model.Size, null, null, WidthType.span12)
            <div id="" class="control-group form-group">
                <label class="control-label col-lg-5 col-md-4 col-sm-4">Giá nhập</label>
                <div class="control-value col-lg-7 col-md-8 col-sm-8">
                    <div class="clearfix">
                        <input class="numberinput2 col-sm-12 text-right" id="PriceInbound" name="PriceInbound" type="text" value="@Model.PriceInbound">
                    </div>
                </div>
            </div>
            <div id="" class="control-group form-group">
                <label class="control-label col-lg-5 col-md-4 col-sm-4">Giá xuất</label>
                <div class="control-value col-lg-7 col-md-8 col-sm-8">
                    <div class="clearfix">
                        <input class="numberinput2 col-sm-12 text-right" id="PriceOutbound" name="PriceOutbound" type="text" value="@Model.PriceOutbound">
                    </div>
                </div>
            </div>
            @*@Html.CustomTextboxFor(model => model.PriceInbound, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 text-right numberinput2" } })
            @Html.CustomTextboxFor(model => model.PriceOutbound, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 text-right numberinput2" } })*@
            @Html.CustomTextboxFor(model => model.MinInventory, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 text-right" } })
            @*<div id="" class="control-group form-group">
                <label class="control-label col-lg-5 col-md-4 col-sm-4" for="DiscountStaff">Chiết khấu cho nhân viên</label>
                <div class="control-value col-lg-7 col-md-8 col-sm-8">
                    <div class="clearfix">
                        <input autocomplete="off" class="col-xs-12" id="DiscountStaff" maskformat="" name="DiscountStaff" placeholder="" type="text" value="@Model.DiscountStaff">
                        <label class="pull-left">

                            <input class="detail_item_check ace ace-switch ace-switch-6" type="checkbox" name="IsMoneyDiscount" id="IsMoneyDiscount" value="@(Model.IsMoneyDiscount == true ? "true" : "false")" @(Model.IsMoneyDiscount != null && Model.IsMoneyDiscount == true ? "checked=\"checked\"" : "") />
                            <span class="lbl" id="lb_IsCheck">
                                @(Model.IsMoneyDiscount == true ? "VNĐ" : "%")
                            </span>
                        </label>
                    </div>

                </div>
            </div>*@
        </div>
        <div class="col-sm-6">
            <div class="wrap-btn-upload">
                <a class="btn btn-primary btn-sm"><i class="fa fa-upload"></i><span>Tải hình mới</span></a>
                <input type="file" id="file-image" name="file-image" class="file-image" onchange="previewFileImage(event, '#display-image img')" />
            </div>
            <div class="text-center" id="display-image">
                <img src="@Model.Image_Name" title="@Model.Name" id="" style="max-height:250px" />
            </div>
        </div>
    </div>

    <div class="top-10">
        <textarea class="ckeditor" cols="20" id="Description" name="Description" placeholder="" rows="2">@Model.Description</textarea>

        <div id="group-supplier" class="control-group form-group top-20">
            <label class="col-sm-12">Được cung cấp bởi:</label>
            <div class="col-sm-12">
                @if (supplier_List.Count() > 0)
                {
                    foreach (var item in supplier_List)
                {
                    <a class="label label-info" href="@Url.Action("Edit","Supplier", new { id = item.Id })">@item.Name</a>
                }
                }
            </div>
        </div>

    </div>

    using (Html.BeginButtonContainer(pageSetting))
    {
        <a class="btn btn-mini btn-primary" id="Save" name="Save" value="Save">
            <i class="ace-icon fa fa-save"></i>
            @Wording.Save
        </a>
    }
}

@section Scripts {
    <link href="/Scripts/ckeditor/contents.css" rel="stylesheet" />
    <script src="/Scripts/ckeditor/ckeditor.js"></script>
    <script>
        $(document).ready(function () {
            LoadNumberInput();
            //$('#PriceInbound').numberFormat();
            //$('#PriceOutbound').numberFormat();
            $('#MinInventory').numberFormat();
            //$("#IsMoneyDiscount").on('change', function () {
            //    if ($("#IsMoneyDiscount").is(':checked')) {
            //        $("#IsMoneyDiscount").val("true");
            //        $("#lb_IsCheck").text("VNĐ");
            //    }
            //    else {
            //        $("#IsMoneyDiscount").val("false");
            //        $("#lb_IsCheck").text("%");
            //    }
            //});
            $('#CategoryCode').change(function () {
                var $this = $(this);
                $('.list-attr-by-category').html('');
                $.get('/ObjectAttribute/GetListByModuleCategory', { category: $this.val(), objectId: @Model.Id, column:'col-sm-6' }, function (res) {
                    if(res.replace(/\s+/,'') != ''){
                        $('.list-attr-by-category').html(res);
                        initDataTypeInput($('.list-attr-by-category input'));
                        $('.box-attr').show();
                    }
                });
            });

           // resetLableRequired('#EditProduct');
            //parseValidatorForm('#ProductInBound');
            $('#Save').click(function () {
                ShowLoading();
                ClearFormatBeforeSubmit($("#EditProduct"));
                $("#EditProduct").submit();
               // HideLoading();
                //return false;
            });

            //init
            $('#CategoryCode').trigger('change');

            $("#Code").change(function () {
                $.get('/Product/CheckCodeExsist/' + $(this).val(), function (rs) {
                    if(rs != '')
                    {
                        alert(rs);
                    }
                });
            });
        });

        function initCkeditor() {
            $('.ckeditor').ckeditor({
                "extraPlugins": 'imagebrowser',
                "imageBrowser_listUrl": "@Url.Action("ListJson","Images")",
                // Define the toolbar groups as it is a more accessible solution.
                toolbarGroups: [
                    { "name": "document", "groups": ["mode", "document", "doctools"] },
                    { "name": "editing", "groups": ["find", "selection", "spellchecker"] },
                    { "name": "forms" },
                    { "name": "tools" },
                    { "name": "basicstyles", "groups": ["basicstyles", "cleanup"] },
                    { "name": "clipboard", "groups": ["clipboar", "undo"] },
                    { "name": "links", "groups": ["links"] },
                    { "name": "paragraph", "groups": ["list", "blocks"] },
                    { "name": "insert", "groups": ["insert"] },
                    { "name": "styles", "groups": ["styles"] },
                    //{ "name": "about", "groups": ["about"] },
                    { "name": "styles" },
                    { "name": "colors" },
                    { "name": "align", "groups": ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'] }

                ],
                // Remove the redundant buttons from toolbar groups defined above.
                removeButtons: 'Underline,Strike,Subscript,Superscript,Anchor,Styles,Specialchar'
            });
        }
    </script>
    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_ChosenStyle()
}
